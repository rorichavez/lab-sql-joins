Use sakila;
# List the number of films per category.
SELECT COUNT(f.film_id) as count_film, fc.category_id, c.name
FROM film AS f
LEFT JOIN film_category AS fc
ON f.film_id = fc.film_id
LEFT JOIN category as c
ON fc.category_id = c.category_id
GROUP BY category_id;
SELECT COUNT(f.film_id) as count_film, c.name as category
FROM film AS f
LEFT JOIN film_category AS fc
ON f.film_id = fc.film_id
LEFT JOIN category as c
ON fc.category_id = c.category_id
GROUP BY c.name;


# Retrieve the store ID, city, and country for each store.
SELECT s.store_id, c.city, co.country
FROM store AS s
LEFT JOIN  address AS a
ON s.address_id = a.address_id
LEFT JOIN  city AS c
ON a.city_id = c.city_id
LEFT JOIN country AS co
ON c.country_id = co.country_id
GROUP BY store_id;

# Calculate the total revenue generated by each store in dollars.
SELECT * FROM payment;

SELECT s.store_id, FORMAT (SUM(p.amount), 1, 'en_US') AS total_revenue_$
FROM store AS s
LEFT JOIN customer AS c
ON s.store_id = c.store_id
LEFT JOIN payment AS p
ON c.customer_id = p.customer_id
GROUP BY store_id;

# Determine the average running time of films for each category.
SELECT c.name AS category, FORMAT(AVG(f.length), 2) AS avg_duration
FROM category AS c
LEFT JOIN film_category as fc
ON c.category_id = fc.category_id
LEFT JOIN film AS f
ON fc.film_id = f.film_id
GROUP BY c.name;

# Bonus:
# Identify the film categories with the longest average running time.
SELECT c.name AS category, FORMAT(AVG(f.length), 2) AS longest_avg
FROM category AS c
LEFT JOIN film_category as fc
ON c.category_id = fc.category_id
LEFT JOIN film AS f
ON fc.film_id = f.film_id
GROUP BY c.name
ORDER BY longest_avg DESC;

# Display the top 10 most frequently rented movies in descending order.
SELECT f.title as movie, COUNT(r.rental_date) AS top_rental
FROM film AS f
LEFT JOIN inventory AS i
ON f.film_id = i.film_id
LEFT JOIN rental AS r
ON i.inventory_id = r.inventory_id
GROUP BY f.title
ORDER BY top_rental DESC
LIMIT 10;

# Determine if "Academy Dinosaur" can be rented from Store 1.
# SELECT * FROM film WHERE title = "Academy Dinosaur";
SELECT f.title, s.store_id, r.rental_date, r.return_date
FROM film AS f 
LEFT JOIN inventory AS i
ON f.film_id = i.film_id
LEFT JOIN rental AS r
ON i.inventory_id = r.inventory_id
LEFT JOIN store AS s
ON i.store_id = s.store_id
WHERE f.title = "Academy Dinosaur"
ORDER BY r.return_date DESC
LIMIT 1;

# Provide a list of all distinct film titles, along with their availability status in the inventory. 
# Include a column indicating whether each title is 'Available' or 'NOT available.' 
# Note that there are 42 titles that are not in the inventory, and this information 
# can be obtained using a CASE statement combined with IFNULL."
SELECT * FROM inventory;
SELECT DISTINCT(f.title) AS movies,
CASE
    WHEN i.inventory_id IS NULL THEN 'NOT available'
    ELSE 'Available' 
END AS status_movie
FROM film AS f 
LEFT JOIN inventory AS i
ON f.film_id = i.film_id
